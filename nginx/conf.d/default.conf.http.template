# nginx/conf.d/default.conf.http.template
# ─────────────── MIME setup ────────────────────
include       /etc/nginx/mime.types;
# ────────────────────────────────────────────────

map $request_uri $loggable {
    "/api/stream/audio"    0;
    default                  1;
}

server {
    listen 80;
    server_name ${DOMAIN};
    access_log /var/log/nginx/access.log combined if=$loggable;

    # MJPEG stream - proxy directly to camera container
    location = /api/stream {
        # turn off the access log
        access_log  off;
        # send any errors to /dev/null (only critical and above, effectively silencing it)
        error_log   /dev/null crit;
        proxy_pass         http://pi-cam-camera:8000/api/stream;
        proxy_http_version 1.1;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   Connection "";
        chunked_transfer_encoding off;
        proxy_buffering    off;
    }
    
    # Audio stream - proxy directly to camera container
    location = /api/stream/audio {
        access_log off;
        error_log /dev/null crit;
        proxy_pass         http://pi-cam-camera:8000/api/stream/audio;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   Connection        "";
        chunked_transfer_encoding off;
        proxy_buffering    off;
        
        # Add these lines:
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_set_header   Range "";        # Important for audio streaming
        add_header         Cache-Control no-cache;
    }
    
    # Camera service health check
    location = /health {
        proxy_pass         http://pi-cam-camera:8000/health;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
    }
    
    # Audio sources endpoint
    location = /api/audio-sources {
        proxy_pass         http://pi-cam-camera:8000/audio-sources;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
    }
    

    # Device refresh endpoint
    location = /refresh-devices {
        proxy_pass         http://pi-cam-camera:8000/refresh-devices;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
    }
    
    # Bare /api → controller
    location = /api {
        proxy_pass         http://pi-cam-controller:8001/api;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
    }
    
    # All other API calls → controller
    location /api/ {
        proxy_pass         http://pi-cam-controller:8001/api/;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
    }
    
    # All other routes → controller
    location / {
        proxy_pass         http://pi-cam-controller:8001;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
    }
    
    # Static and media files
    location /static/ { 
        alias /app/static/; 
        access_log off;
        expires 30d;
    }
    
    location /media/ {
        alias           /app/media/;
        # mime.types already included above
        add_header      Accept-Ranges bytes;
        expires         1h;
        access_log      off;
        types {
            video/mp4  mp4;
        }
        default_type  application/octet-stream;
    }
}